package io.github.mapogolions.categorytheory


object Bifunctor {
  // identity morphism
  def id[A](x: A) = x

  // First category
  type a = Int
  type c = Boolean
  val f: a => c = x => if (x == 0) false else true

  // Second category
  type b = Char
  type d = String
  val g: b => d = _.toString

  // target category
  type Fab = Pair[a, b] // start point for `bimap`
  type Fcd = Pair[c, d] // end point for `bimap`
  type Fcb = Pair[c, b] // end point for `bifirst`
  type Fad = Pair[a, d] // end point for `bisecond`

  // bifunctor `fmap`
  /**
    * `fmap` - a mapping two functions at once. The result is a lifted
    * function, (f a b -> f c d), operating on types generated by the
    * bifunctor's type constructor.
    *
    * instance Bifunctor `Pair` where
    *   bimap :: (a -> c) -> (b -> d) -> Pair a b -> Pair c d
    *   first :: (a -> c) -> Pair a b -> Pair c d
    *   second :: (b -> d) -> Pair a b -> Pair a d
    *
  */
  def bimapPair[A, B, C, D](g: A => C)(h: B => D): Pair[A, B] => Pair[C, D] = {
    val f: Pair[A, B] => Pair[C, D] =
      _ match {
        case Pair(fst, snd) => Pair(g(fst), h(snd))
      }
    f
  }

  // There is default implementation of `bimap` in terms of `first` and `second`
  def bifirstPair[A, B, C](g: A => C): Pair[A, B] => Pair[C, B] =
    bimapPair(g)(id[B])
  def bisecondPair[A, B, D](g: B => D): Pair[A, B] => Pair[A, D] =
    bimapPair(id[A])(g)


  /**
    *  instance Bifunctor `Either` where
    *    bimap :: (a -> c) -> (b -> d) -> Either a b -> Either c d
    *    first :: (a -> c) -> Either a b -> Either c b
    *    second :: (b -> d) -> Either a b -> Either a d
    */
  def bimapEither[A, B, C, D](g: A => C)(h: B => D): Either[A, B] => Either[C, D] = {
    val f: Either[A, B] => Either[C, D] =
      _ match {
        case Left(a) => Left(g(a))
        case Right(b) => Right(h(b))
      }
    f
  }

  def bifirstEither[A, B, C](g: A => C): Either[A, B] => Either[C, B] =
    bimapEither(g)(id[B])
  def bisecondEither[A, B, D](g: B => D): Either[A, B] => Either[A, D] =
    bimapEither(id[A])(g)
}
